#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤ Contact Management API –∑ –ø–æ–≤–Ω–∏–º –ø–æ–∫—Ä–∏—Ç—Ç—è–º

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    python run_tests.py [–æ–ø—Ü—ñ—ó]

–û–ø—Ü—ñ—ó:
    --unit         –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –º–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏
    --integration  –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏
    --coverage     –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç –ø–æ–∫—Ä–∏—Ç—Ç—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º True)
    --html         –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ HTML –∑–≤—ñ—Ç –ø–æ–∫—Ä–∏—Ç—Ç—è
    --verbose      –î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥
    --parallel     –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    --fail-under   –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–∫—Ä–∏—Ç—Ç—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 75)
"""

import argparse
import subprocess
import sys
import os
from pathlib import Path


def run_command(command, description=""):
    """–ó–∞–ø—É—Å–∫–∞—î –∫–æ–º–∞–Ω–¥—É —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*60}")
    print(f"üîÑ {description}")
    print(f"{'='*60}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
    print()
    
    try:
        result = subprocess.run(command, check=True, capture_output=False)
        print(f"\n‚úÖ {description} - –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return result.returncode == 0
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå {description} - –ü–æ–º–∏–ª–∫–∞ (–∫–æ–¥: {e.returncode})")
        return False


def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    
    required_packages = [
        "pytest",
        "pytest-cov", 
        "pytest-asyncio",
        "httpx",
        "faker"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace("-", "_"))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏: {', '.join(missing_packages)}")
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –∫–æ–º–∞–Ω–¥–æ—é:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    print("‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")
    return True


def setup_test_environment():
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î —Ç–µ—Å—Ç–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ"""
    print("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...")
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
    test_env = {
        "TESTING": "true",
        "DB_HOST": "localhost",
        "DB_PORT": "5432",
        "DB_NAME": "test_contacts_db",
        "DB_USER": "test_user",
        "DB_PASSWORD": "test_password",
        "SECRET_KEY": "test-secret-key-for-testing-only",
        "REDIS_HOST": "localhost",
        "REDIS_PORT": "6379",
        "MAIL_USERNAME": "test@example.com",
        "MAIL_PASSWORD": "test_password",
        "CLOUDINARY_NAME": "test_cloud",
        "CLOUDINARY_API_KEY": "test_key",
        "CLOUDINARY_API_SECRET": "test_secret"
    }
    
    for key, value in test_env.items():
        os.environ[key] = value
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")


def create_test_directories():
    """–°—Ç–≤–æ—Ä—é—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—ñ–≤"""
    directories = [
        "tests",
        "tests/unit", 
        "tests/integration",
        "htmlcov"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)


def run_tests(args):
    """–ó–∞–ø—É—Å–∫–∞—î —Ç–µ—Å—Ç–∏ –∑ –∑–∞–¥–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    # –ë–∞–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ pytest
    command = ["python", "-m", "pytest"]
    
    # –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—ó –ø–æ–∫—Ä–∏—Ç—Ç—è
    if args.coverage:
        command.extend([
            "--cov=app",
            "--cov-report=term-missing",
            f"--cov-fail-under={args.fail_under}"
        ])
        
        if args.html:
            command.append("--cov-report=html:htmlcov")
    
    # –í–∏–±—ñ—Ä —Ç–∏–ø—É —Ç–µ—Å—Ç—ñ–≤
    if args.unit:
        command.extend(["-m", "unit"])
    elif args.integration:
        command.extend(["-m", "integration"])
    else:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ —Ç–µ—Å—Ç–∏
        command.append("tests/")
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
    if args.verbose:
        command.append("-v")
    
    if args.parallel:
        command.extend(["-n", "auto"])
    
    # –î–æ–¥–∞—î–º–æ –∫–æ–ª—å–æ—Ä–æ–≤–∏–π –≤–∏–≤—ñ–¥
    command.append("--color=yes")
    
    return run_command(command, "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤")


def generate_coverage_report():
    """–ì–µ–Ω–µ—Ä—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ–∫—Ä–∏—Ç—Ç—è"""
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –ø–æ–∫—Ä–∏—Ç—Ç—è...")
    
    # –¢–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç
    run_command(
        ["python", "-m", "coverage", "report", "--show-missing"],
        "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É –ø–æ–∫—Ä–∏—Ç—Ç—è"
    )
    
    # HTML –∑–≤—ñ—Ç
    run_command(
        ["python", "-m", "coverage", "html"],
        "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML –∑–≤—ñ—Ç—É –ø–æ–∫—Ä–∏—Ç—Ç—è"
    )
    
    print("\nüìÅ HTML –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó 'htmlcov/'")
    print("   –í—ñ–¥–∫—Ä–∏–π—Ç–µ htmlcov/index.html —É –±—Ä–∞—É–∑–µ—Ä—ñ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É")


def run_specific_test_suites():
    """–ó–∞–ø—É—Å–∫–∞—î —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –Ω–∞–±–æ—Ä–∏ —Ç–µ—Å—Ç—ñ–≤"""
    test_suites = [
        {
            "name": "–ú–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏ CRUD",
            "command": ["python", "-m", "pytest", "-m", "crud", "-v"],
            "description": "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è CRUD –æ–ø–µ—Ä–∞—Ü—ñ–π"
        },
        {
            "name": "–¢–µ—Å—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó", 
            "command": ["python", "-m", "pytest", "-m", "auth", "-v"],
            "description": "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"
        },
        {
            "name": "API —Ç–µ—Å—Ç–∏",
            "command": ["python", "-m", "pytest", "-m", "api", "-v"],
            "description": "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤"
        }
    ]
    
    for suite in test_suites:
        success = run_command(suite["command"], suite["description"])
        if not success:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –Ω–∞–±–æ—Ä—ñ —Ç–µ—Å—Ç—ñ–≤: {suite['name']}")
            return False
    
    return True


def cleanup():
    """–û—á–∏—â–∞—î —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏ –ø—ñ—Å–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("\nüßπ –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
    
    temp_files = [
        "test.db",
        ".coverage",
        ".pytest_cache"
    ]
    
    for file_path in temp_files:
        if os.path.exists(file_path):
            if os.path.isfile(file_path):
                os.remove(file_path)
            else:
                import shutil
                shutil.rmtree(file_path)
    
    print("‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    parser = argparse.ArgumentParser(
        description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ Contact Management API",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    
    parser.add_argument(
        "--unit", 
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –º–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏"
    )
    
    parser.add_argument(
        "--integration", 
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏"
    )
    
    parser.add_argument(
        "--coverage",
        action="store_true",
        default=True,
        help="–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç –ø–æ–∫—Ä–∏—Ç—Ç—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)"
    )
    
    parser.add_argument(
        "--no-coverage",
        action="store_true",
        help="–ù–µ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç –ø–æ–∫—Ä–∏—Ç—Ç—è"
    )
    
    parser.add_argument(
        "--html",
        action="store_true",
        help="–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ HTML –∑–≤—ñ—Ç –ø–æ–∫—Ä–∏—Ç—Ç—è"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥"
    )
    
    parser.add_argument(
        "--parallel", "-n",
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ"
    )
    
    parser.add_argument(
        "--fail-under",
        type=int,
        default=75,
        help="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–∫—Ä–∏—Ç—Ç—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 75%%)"
    )
    
    parser.add_argument(
        "--suites",
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –Ω–∞–±–æ—Ä–∏ —Ç–µ—Å—Ç—ñ–≤"
    )
    
    parser.add_argument(
        "--cleanup",
        action="store_true",
        help="–û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏ –ø—ñ—Å–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
    )
    
    args = parser.parse_args()
    
    # –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–Ω–∏—Ö –æ–ø—Ü—ñ–π
    if args.no_coverage:
        args.coverage = False
    
    if args.unit and args.integration:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –º–æ–∂–Ω–∞ –æ–¥–Ω–æ—á–∞—Å–Ω–æ –≤–∫–∞–∑—É–≤–∞—Ç–∏ --unit —Ç–∞ --integration")
        sys.exit(1)
    
    print("üß™ Contact Management API - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    if not check_dependencies():
        sys.exit(1)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    setup_test_environment()
    create_test_directories()
    
    success = True
    
    try:
        if args.suites:
            # –ó–∞–ø—É—Å–∫ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤ —Ç–µ—Å—Ç—ñ–≤
            success = run_specific_test_suites()
        else:
            # –ó–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
            success = run_tests(args)
        
        if success and args.coverage and args.html:
            generate_coverage_report()
    
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        success = False
    
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        success = False
    
    finally:
        if args.cleanup:
            cleanup()
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ!")
        if args.coverage:
            print(f"üìä –ü–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ—Å—Ç–∞–º–∏: –º—ñ–Ω—ñ–º—É–º {args.fail_under}%")
        if args.html:
            print("üìÅ HTML –∑–≤—ñ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ htmlcov/index.html")
    else:
        print("‚ùå –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏ –∞–±–æ –≤–∏–Ω–∏–∫–ª–∏ –ø–æ–º–∏–ª–∫–∏")
        sys.exit(1)


if __name__ == "__main__":
    main()