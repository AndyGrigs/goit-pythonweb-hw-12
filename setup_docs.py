def build_documentation():
    """–ë—É–¥—É—î –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é."""
    print("üèóÔ∏è –ü–æ–±—É–¥–æ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...")

    os.chdir("docs")

    # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ make (–¥–ª—è Unix —Å–∏—Å—Ç–µ–º)
    success = False
    try:
        success = run_command(
            ["make", "clean"],
            "–û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –ø–æ–±—É–¥–æ–≤–∏",
            check=False
        )
        success = run_command(
            ["make", "html"],
            "–ü–æ–±—É–¥–æ–≤–∞ HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó (make)",
            check=False
        )
    except FileNotFoundError:
        print("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ 'make' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sphinx-build...")

    # –Ø–∫—â–æ make –Ω–µ –ø—Ä–∞—Ü—é—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sphinx-build –Ω–∞–ø—Ä—è–º—É
    if not success:
        run_command(
            ["sphinx-build", "-b", "html", "-E", ".", "_build/html"],
            "–ü–æ–±—É–¥–æ–≤–∞ HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó (sphinx-build)"
        )

    os.chdir("..")

    if os.path.exists("docs/_build/html/index.html"):
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –ø–æ–±—É–¥–æ–≤–∞–Ω–∞!")
        print("üìÅ HTML —Ñ–∞–π–ª–∏ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤: docs/_build/html/")
        print("üåê –í—ñ–¥–∫—Ä–∏–π—Ç–µ docs/_build/html/index.html —É –±—Ä–∞—É–∑–µ—Ä—ñ")
    else:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–±—É–¥–æ–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó")
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª docs/conf.py —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É")

    return os.path.exists("docs/_build/html/index.html")


def serve_documentation():
    """–ó–∞–ø—É—Å–∫–∞—î —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...")
    
    os.chdir("docs")
    
    try:
        print("üì° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:8080")
        print("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏")
        
        subprocess.run([
            "sphinx-autobuild", 
            ".", 
            "_build/html",
            "--host", "0.0.0.0",
            "--port", "8080",
            "--open-browser"
        ])
        
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ")
    except FileNotFoundError:
        print("‚ùå sphinx-autobuild –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –π–æ–≥–æ:")
        print("pip install sphinx-autobuild")
    finally:
        os.chdir("..")


def clean_docs():
    """–û—á–∏—â—É—î —ñ—Å–Ω—É—é—á—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é."""
    print("üßπ –û—á–∏—â–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...")
    
    paths_to_clean = [
        "docs/_build",
        "docs/_static/__pycache__",
    ]
    
    for path in paths_to_clean:
        if os.path.exists(path):
            shutil.rmtree(path)
            print(f"‚úÖ –û—á–∏—â–µ–Ω–æ: {path}")
        else:
            print(f"‚ö†Ô∏è –®–ª—è—Ö –Ω–µ —ñ—Å–Ω—É—î: {path}")
    
    print("‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def validate_project_structure():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É...")
    
    required_paths = [
        "app",
        "app/main.py",
        "app/models",
        "app/crud",
        "app/services",
        "app/utils",
        "app/api"
    ]
    
    missing_paths = []
    for path in required_paths:
        if not os.path.exists(path):
            missing_paths.append(path)
    
    if missing_paths:
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏/–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó:")
        for path in missing_paths:
            print(f"   - {path}")
        return False
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True


def create_env_template():
    """–°—Ç–≤–æ—Ä—é—î —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª—É –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."""
    print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è .env.example...")
    
    env_template = '''# Database Configuration
DB_HOST=localhost
DB_PORT=5433
DB_NAME=contacts_db
DB_USER=contacts_user
DB_PASSWORD=contacts_password

# Security Configuration
SECRET_KEY=your-super-secret-jwt-key-here-change-in-production
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Email Configuration
MAIL_USERNAME=your-email@gmail.com
MAIL_PASSWORD=your-app-password
MAIL_FROM=your-email@gmail.com
MAIL_PORT=587
MAIL_SERVER=smtp.gmail.com

# Cloudinary Configuration
CLOUDINARY_NAME=your-cloudinary-name
CLOUDINARY_API_KEY=your-api-key
CLOUDINARY_API_SECRET=your-api-secret

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=
CACHE_EXPIRE_MINUTES=15

# Rate Limiting
RATE_LIMIT_ME_ENDPOINT=10

# Application
APP_NAME=Contact Management API
APP_VERSION=2.0.0
DEBUG=true
'''
    
    if not os.path.exists(".env.example"):
        with open(".env.example", "w", encoding="utf-8") as f:
            f.write(env_template)
        print("‚úÖ .env.example —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    else:
        print("‚ö†Ô∏è .env.example –≤–∂–µ —ñ—Å–Ω—É—î")


def show_next_steps():
    """–ü–æ–∫–∞–∑—É—î –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏ –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è."""
    print("\n" + "="*60)
    print("üéâ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("="*60)
    
    print("\nüìã –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
    print("1. cd docs")
    print("2. make html                 # –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é")
    print("3. make livehtml            # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ live reload —Å–µ—Ä–≤–µ—Ä")
    print("4. open _build/html/index.html  # –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ")
    
    print("\nüîß –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
    print("make clean                  # –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–±—É–¥–æ–≤—É")
    print("make linkcheck             # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
    print("make coverage              # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó")
    
    print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
    print("‚Ä¢ –î–æ–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ñ docstring –¥–æ –≤—Å—ñ—Ö –ø—É–±–ª—ñ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π")
    print("‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Google –∞–±–æ NumPy —Å—Ç–∏–ª—å docstring")
    print("‚Ä¢ –î–æ–¥–∞–π—Ç–µ –ø—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ docstring")
    print("‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–Ω–æ–≤–ª—é–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –ø—Ä–∏ –∑–º—ñ–Ω–∞—Ö –∫–æ–¥—É")
    
    print("\nüîó –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:")
    print("‚Ä¢ Sphinx –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: https://www.sphinx-doc.org/")
    print("‚Ä¢ reStructuredText: https://docutils.sourceforge.io/rst.html")
    print("‚Ä¢ Napoleon (Google docstrings): https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    parser = argparse.ArgumentParser(
        description="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Sphinx –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –¥–ª—è Contact Management API",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    parser.add_argument("--clean", action="store_true", 
                       help="–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é")
    parser.add_argument("--build", action="store_true",
                       help="–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    parser.add_argument("--serve", action="store_true",
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É")
    parser.add_argument("--validate", action="store_true",
                       help="–¢—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É")
    
    args = parser.parse_args()
    
    print("üìö Contact Management API - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó")
    print("=" * 60)
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É
        if not validate_project_structure():
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É")
            sys.exit(1)
        
        if args.validate:
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            sys.exit(0)
        
        # –û—á–∏—â–µ–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if args.clean:
            clean_docs()
        
        # –û—Å–Ω–æ–≤–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        if not check_dependencies():
            print("\nüîß –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
            install_docs_dependencies()
        
        create_docs_structure()
        create_sphinx_config()
        create_custom_css()
        create_index_page()
        create_api_documentation()
        create_modules_documentation()
        create_development_documentation()
        create_makefile()
        create_requirements_file()
        add_missing_docstrings()
        create_env_template()
        
        print("\nüéâ –ë–∞–∑–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –ü–æ–±—É–¥–æ–≤–∞ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if args.build:
            success = build_documentation()
            if not success:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–±—É–¥–æ–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó")
                print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ —Ç–∞ –≤–∏–ø—Ä–∞–≤—Ç–µ —ó—Ö")
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if args.serve:
            if not args.build:
                print("üîÑ –ü–æ–±—É–¥–æ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞...")
                build_documentation()
            serve_documentation()
        
        show_next_steps()
        
    except KeyboardInterrupt:
        print("\n‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Sphinx –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
–¥–ª—è Contact Management API –ø—Ä–æ–µ–∫—Ç—É.

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    python setup_docs.py [--clean] [--build] [--serve]

–û–ø—Ü—ñ—ó:
    --clean     –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é
    --build     –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    --serve     –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
"""

import os
import sys
import shutil
import subprocess
import argparse
from pathlib import Path
import textwrap


if __name__ == "__main__":
    main()

def run_command(command, description="", check=True):
    """–ó–∞–ø—É—Å–∫–∞—î –∫–æ–º–∞–Ω–¥—É —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    print(f"üîÑ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
    
    try:
        result = subprocess.run(command, check=check, capture_output=True, text=True)
        if result.stdout:
            print(result.stdout)
        print(f"‚úÖ {description} - –£—Å–ø—ñ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –ü–æ–º–∏–ª–∫–∞: {e}")
        if e.stderr:
            print(f"Stderr: {e.stderr}")
        return False


def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π."""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    
    required_packages = [
        ("sphinx", "sphinx"),
        ("sphinx_rtd_theme", "sphinx_rtd_theme"),
        ("myst-parser", "myst_parser"),
        ("sphinx-autobuild", "sphinx_autobuild"),
        ("sphinx-autodoc-typehints", "sphinx_autodoc_typehints")
    ]
    
    missing_packages = []
    
    for package_name, import_name in required_packages:
        try:
            __import__(import_name)
            print(f"‚úÖ {package_name}")
        except ImportError:
            missing_packages.append(package_name)
            print(f"‚ùå {package_name}")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏: {', '.join(missing_packages)}")
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –∫–æ–º–∞–Ω–¥–æ—é:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    print("‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")
    return True


def create_docs_structure():
    """–°—Ç–≤–æ—Ä—é—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."""
    print("üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π...")
    
    dirs_to_create = [
        "docs",
        "docs/_static",
        "docs/_templates", 
        "docs/api",
        "docs/modules",
        "docs/development",
        "docs/images"
    ]
    
    for dir_path in dirs_to_create:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {dir_path}")
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —Å—Ç–≤–æ—Ä–µ–Ω–∞")


def install_docs_dependencies():
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."""
    print("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...")
    
    docs_requirements = [
        "sphinx>=7.1.0",
        "sphinx-rtd-theme>=1.3.0", 
        "myst-parser>=2.0.0",
        "sphinx-autobuild>=2021.3.14",
        "sphinx-autodoc-typehints>=1.24.0",
        "sphinx-autoapi>=3.0.0"
    ]
    
    for package in docs_requirements:
        success = run_command(
            ["pip", "install", package],
            f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {package.split('>=')[0]}",
            check=False
        )
        if not success:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ {package}")
    
    print("‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")


def create_sphinx_config():
    """–°—Ç–≤–æ—Ä—é—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª Sphinx."""
    print("‚öôÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Sphinx...")
    
    config_content = '''# Configuration file for the Sphinx documentation builder.
import os
import sys
from pathlib import Path

# Add the project root and app to the path
project_root = Path(__file__).parent.parent.absolute()
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "app"))

print(f"Project root: {project_root}")
print(f"Python path: {sys.path[:3]}")

# Project information
project = 'Contact Management API'
copyright = '2025, Contact Management Team'
author = 'Contact Management Team'
release = '2.0.0'
version = '2.0.0'

# General configuration
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.githubpages',
    'sphinx_rtd_theme',
    'myst_parser',
]

templates_path = ['_templates']
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']
language = 'uk'

# Source file suffixes
source_suffix = {
    '.rst': None,
    '.md': 'myst_parser',
}

# Master document
master_doc = 'index'

# HTML output options
html_theme = 'sphinx_rtd_theme'
html_static_path = ['_static']
html_css_files = ['custom.css']

# Theme options
html_theme_options = {
    'collapse_navigation': False,
    'sticky_navigation': True,
    'navigation_depth': 4,
    'includehidden': True,
    'titles_only': False,
    'logo_only': False,
    'display_version': True,
    'prev_next_buttons_location': 'bottom',
    'style_external_links': True,
    'style_nav_header_background': '#2980B9',
}

# HTML context
html_context = {
    'display_github': True,
    'github_user': 'yourusername',
    'github_repo': 'contact-management-api',
    'github_version': 'main',
    'conf_py_path': '/docs/',
}

# Autodoc options
autodoc_default_options = {
    'members': True,
    'member-order': 'bysource',
    'special-members': '__init__',
    'undoc-members': True,
    'exclude-members': '__weakref__'
}

# Mock imports –¥–ª—è –º–æ–¥—É–ª—ñ–≤, —è–∫—ñ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ
autodoc_mock_imports = [
    # FastAPI —Ç–∞ –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
    'fastapi',
    'fastapi.middleware',
    'fastapi.security',
    'fastapi.responses',
    'fastapi_mail',
    'slowapi',
    'uvicorn',
    
    # –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
    'sqlalchemy',
    'alembic',
    'psycopg2',
    'psycopg2-binary',
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    'pydantic',
    'pydantic_settings',
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–∞ –±–µ–∑–ø–µ–∫–∞
    'jose',
    'passlib',
    'python-jose',
    
    # –ó–æ–≤–Ω—ñ—à–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏
    'redis',
    'cloudinary',
    
    # –Ü–Ω—à—ñ
    'python-multipart',
    'python-dotenv',
    'typing_extensions'
]

# Napoleon settings (Google —Ç–∞ NumPy docstrings)
napoleon_google_docstring = True
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = True
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True
napoleon_preprocess_types = False
napoleon_type_aliases = None
napoleon_attr_annotations = True

# Intersphinx mapping
intersphinx_mapping = {
    'python': ('https://docs.python.org/3/', None),
    'fastapi': ('https://fastapi.tiangolo.com/', None),
    'sqlalchemy': ('https://docs.sqlalchemy.org/', None),
    'pydantic': ('https://docs.pydantic.dev/', None),
}

# Todo extension
todo_include_todos = True

def setup(app):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Sphinx app."""
    app.add_css_file('custom.css')
'''
    
    with open("docs/conf.py", "w", encoding="utf-8") as f:
        f.write(config_content)
    
    print("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Sphinx —Å—Ç–≤–æ—Ä–µ–Ω–∞")


def create_custom_css():
    """–°—Ç–≤–æ—Ä—é—î –∫–∞—Å—Ç–æ–º–Ω–∏–π CSS —Ñ–∞–π–ª."""
    print("üé® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ CSS...")
    
    css_content = '''/* Custom CSS for Contact Management API Documentation */

/* –ó–∞–≥–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ */
.wy-nav-content {
    max-width: none;
}

/* –ö–æ–ª—å–æ—Ä–æ–≤–∞ —Å—Ö–µ–º–∞ */
.wy-side-nav-search {
    background-color: #2980B9;
}

.wy-side-nav-search input[type=text] {
    border-color: #3498DB;
}

/* –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ */
.rst-content .section > h1,
.rst-content .section > h2,
.rst-content .section > h3 {
    margin-bottom: 24px;
}

/* –°—Ç–∏–ª—ñ –¥–ª—è code –±–ª–æ–∫—ñ–≤ */
.rst-content pre.literal-block,
.rst-content div[class^='highlight'] pre {
    font-size: 14px;
    line-height: 1.4;
}

/* –ü—ñ–¥—Å–≤—ñ—Ç–∫–∞ –≤–∞–∂–ª–∏–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ */
.rst-content .admonition.note {
    background: #E8F4FD;
    border: 1px solid #3498DB;
}

.rst-content .admonition.warning {
    background: #FDF2E9;
    border: 1px solid #E67E22;
}

/* –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó */
.wy-menu-vertical li.current > a {
    background: #3498DB;
}

.wy-menu-vertical li.current a {
    border-right: 1px solid #3498DB;
}

/* API documentation improvements */
.rst-content dl:not(.docutils) dt {
    background: #f8f8f8;
    border-left: 3px solid #2980B9;
    padding: 12px;
    font-weight: bold;
}

/* Method signatures */
.rst-content .method dt,
.rst-content .function dt,
.rst-content .class dt {
    background: #f4f4f4;
    border-left: 4px solid #27AE60;
}

/* Parameters and return values */
.rst-content .field-list {
    margin-bottom: 24px;
}

.rst-content .field-name {
    background: #ECF0F1;
    padding: 4px 8px;
    border-radius: 3px;
    font-weight: bold;
    min-width: 100px;
}
'''
    
    with open("docs/_static/custom.css", "w", encoding="utf-8") as f:
        f.write(css_content)
    
    print("‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∏–π CSS —Å—Ç–≤–æ—Ä–µ–Ω–æ")


def create_index_page():
    """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."""
    print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏...")
    
    index_content = '''Contact Management API Documentation
=====================================

.. image:: https://img.shields.io/badge/version-2.0.0-blue.svg
   :alt: Version
   :target: #

.. image:: https://img.shields.io/badge/python-3.9+-green.svg
   :alt: Python Version

.. image:: https://img.shields.io/badge/FastAPI-0.104+-red.svg
   :alt: FastAPI Version

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó **Contact Management API** - –ø–æ–≤–Ω–æ—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∑ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é, email –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é —Ç–∞ –±–∞–≥–∞—Ç—å–º–∞ —ñ–Ω—à–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏.

üåü –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ
--------------

* **JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è** –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è–º —Ç–µ—Ä–º—ñ–Ω—É –¥—ñ—ó
* **Email –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è** –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
* **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏** –∑ CRUD –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏
* **–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä—ñ–≤** —á–µ—Ä–µ–∑ Cloudinary
* **Rate limiting** –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É API
* **Redis –∫–µ—à—É–≤–∞–Ω–Ω—è** –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
* **PostgreSQL** –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –∑ –º—ñ–≥—Ä–∞—Ü—ñ—è–º–∏
* **Docker** –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü—ñ—è
* **–ü–æ–≤–Ω–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–∫—Ä–∏—Ç—Ç—è** 75%+

üìö –ó–º—ñ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
---------------------

.. toctree::
   :maxdepth: 2
   :caption: üöÄ API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è

   api/index
   api/authentication
   api/users
   api/contacts

.. toctree::
   :maxdepth: 2
   :caption: üìñ –ö–æ–¥ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è

   modules/index
   modules/models
   modules/crud
   modules/services
   modules/utils

.. toctree::
   :maxdepth: 2
   :caption: üõ†Ô∏è –†–æ–∑—Ä–æ–±–∫–∞

   development/index
   development/setup
   development/testing
   development/deployment

üöÄ –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç
----------------

1. **–ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É:**

.. code-block:: bash

   git clone <your-repo-url>
   cd contact-management-api

2. **–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π:**

.. code-block:: bash

   # –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
   python -m venv venv
   
   # –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ (Windows)
   venv\\Scripts\\activate
   
   # –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ (Linux/Mac)
   source venv/bin/activate
   
   # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
   pip install -r requirements.txt

3. **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:**

.. code-block:: bash

   # –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ .env.example –≤ .env
   cp .env.example .env
   
   # –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   nano .env

4. **–ó–∞–ø—É—Å–∫ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:**

.. code-block:: bash

   # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ PostgreSQL —Ç–∞ Redis
   docker-compose up -d

5. **–í–∏–∫–æ–Ω–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ–π:**

.. code-block:: bash

   # –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó
   alembic upgrade head

6. **–ó–∞–ø—É—Å–∫ API:**

.. code-block:: bash

   # –ó–∞–ø—É—Å–∫ –∑ auto-reload
   uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

üåê –î–æ—Å—Ç—É–ø –¥–æ API
----------------

–ü—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É API –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–µ –∑–∞ –∞–¥—Ä–µ—Å–∞–º–∏:

* **API Docs (Swagger):** http://localhost:8000/docs
* **Alternative Docs (ReDoc):** http://localhost:8000/redoc  
* **PgAdmin:** http://localhost:8080

üìä –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞
--------------

–ü—Ä–æ–µ–∫—Ç –ø–æ–±—É–¥–æ–≤–∞–Ω–∏–π –∑–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ **Clean Architecture** —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î:

* **FastAPI** - —Å—É—á–∞—Å–Ω–∏–π –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è Python
* **SQLAlchemy** - ORM –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
* **Pydantic** - –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
* **Alembic** - –º—ñ–≥—Ä–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
* **JWT** - –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
* **Redis** - –∫–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–µ—Å—ñ—ó
* **Cloudinary** - –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å

üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
-------------

–ü—Ä–æ–µ–∫—Ç –º–∞—î –ø–æ–≤–Ω–µ –ø–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ—Å—Ç–∞–º–∏ –ø–æ–Ω–∞–¥ 75%:

.. code-block:: bash

   # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Ç–µ—Å—Ç–∏
   make test
   
   # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –º–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏
   make test-unit
   
   # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏  
   make test-integration
   
   # –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ HTML –∑–≤—ñ—Ç –ø–æ–∫—Ä–∏—Ç—Ç—è
   make test-html

üìù –õ—ñ—Ü–µ–Ω–∑—ñ—è
-----------

–¶–µ–π –ø—Ä–æ–µ–∫—Ç —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂—É—î—Ç—å—Å—è –ø—ñ–¥ –ª—ñ—Ü–µ–Ω–∑—ñ—î—é MIT. –î–∏–≤—ñ—Ç—å—Å—è —Ñ–∞–π–ª LICENSE –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.

–Ü–Ω–¥–µ–∫—Å–∏ —Ç–∞ –ø–æ—à—É–∫
================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

---

**–ê–≤—Ç–æ—Ä:** AndyGrigs  
**–í–µ—Ä—Å—ñ—è:** 2.0.0  
**–û—Å—Ç–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:** 2025-09-23
'''
    
    with open("docs/index.rst", "w", encoding="utf-8") as f:
        f.write(index_content)
    
    print("‚úÖ –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞")


def create_api_documentation():
    """–°—Ç–≤–æ—Ä—é—î –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é API."""
    print("üì° –°—Ç–≤–æ—Ä–µ–Ω–Ω—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...")
    
    # API index
    api_index_content = '''API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
=================

–¶–µ–π —Ä–æ–∑–¥—ñ–ª –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤–Ω—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –≤—Å—ñ—Ö API –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤ Contact Management API.

.. toctree::
   :maxdepth: 2
   
   authentication
   users  
   contacts

–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
-------------------

Base URL
~~~~~~~~

–í –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ:

.. code-block:: text

   http://localhost:8000

–í–µ—Ä—Å—ñ–æ–Ω—É–≤–∞–Ω–Ω—è API
~~~~~~~~~~~~~~~~~~

–í—Å—ñ API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –º–∞—é—Ç—å –ø—Ä–µ—Ñ—ñ–∫—Å ``/api/v1/``

–ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
~~~~~~~~~~~~~~

API –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î JWT (JSON Web Tokens) –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó. –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Ç–æ–∫–µ–Ω, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É ``Authorization``:

.. code-block:: text

   Authorization: Bearer YOUR_JWT_TOKEN

–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
~~~~~~~~~~~~~~~~~

–í—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç—ñ:

.. code-block:: json

   {
     "field1": "value1",
     "field2": "value2"
   }

–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
~~~~~~~~~~~~~~~

API –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∏:

* ``200`` - –£—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç
* ``201`` - –†–µ—Å—É—Ä—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ
* ``400`` - –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç
* ``401`` - –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
* ``403`` - –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ
* ``404`` - –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ
* ``422`` - –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
* ``429`` - –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤
* ``500`` - –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

–§–æ—Ä–º–∞—Ç –ø–æ–º–∏–ª–æ–∫:

.. code-block:: json

   {
     "detail": "Error description"
   }
'''
    
    with open("docs/api/index.rst", "w", encoding="utf-8") as f:
        f.write(api_index_content)
    
    # Authentication API
    auth_content = '''–ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è API
==================

–ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –≤—Ö–æ–¥—É —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.

–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
----------------------

–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–∏—Å—Ç–µ–º—ñ.

.. http:post:: /api/v1/auth/register

   **–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É:**

   .. code-block:: json

      {
        "username": "johndoe",
        "email": "john@example.com", 
        "password": "SecurePassword123!"
      }

   **–ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:**

   .. code-block:: json

      {
        "id": 1,
        "username": "johndoe",
        "email": "john@example.com",
        "role": "user", 
        "is_verified": false,
        "created_at": "2025-09-23T10:30:00Z"
      }

   :reqjson string username: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (3-50 —Å–∏–º–≤–æ–ª—ñ–≤)
   :reqjson string email: Email –∞–¥—Ä–µ—Å–∞
   :reqjson string password: –ü–∞—Ä–æ–ª—å (–º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤)
   :reqjson string role: –†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
   
   :statuscode 201: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π
   :statuscode 409: Email –∞–±–æ username –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ
   :statuscode 422: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ

–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
-------------------------

.. http:post:: /api/v1/auth/register-admin

   –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä–æ–ª–ª—é admin.

–í—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
----------------

.. http:post:: /api/v1/auth/login

   **–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É:**

   .. code-block:: json

      {
        "email": "john@example.com",
        "password": "SecurePassword123!"
      }

   **–ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:**

   .. code-block:: json

      {
        "access_token": "eyJ0eXAiOiJKV1QiLCJhbGc...",
        "token_type": "bearer"
      }

   :reqjson string email: Email –∞–¥—Ä–µ—Å–∞
   :reqjson string password: –ü–∞—Ä–æ–ª—å
   
   :statuscode 200: –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥
   :statuscode 401: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ credentials

–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è Email
-----------------

.. http:get:: /api/v1/auth/verify-email

   –í–µ—Ä–∏—Ñ—ñ–∫—É—î email –∞–¥—Ä–µ—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ —Ç–æ–∫–µ–Ω–æ–º.

   :query token: –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ email

–ü–æ–≤—Ç–æ—Ä–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
------------------------------

.. http:post:: /api/v1/auth/resend-verification

   :query email: Email –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏

–°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
---------------

.. http:post:: /api/v1/auth/forgot-password

   –ó–∞–ø–∏—Ç –Ω–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è.

.. http:post:: /api/v1/auth/reset-password

   –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –∑–∞ —Ç–æ–∫–µ–Ω–æ–º.

.. http:get:: /api/v1/auth/verify-reset-token

   –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è.
'''
    
    with open("docs/api/authentication.rst", "w", encoding="utf-8") as f:
        f.write(auth_content)
    
    # Users API
    users_content = '''–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ API
===============

–ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.

–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
-------------------------------

.. http:get:: /api/v1/users/me

   **–ó–∞–≥–æ–ª–æ–≤–∫–∏:**

   .. code-block:: text

      Authorization: Bearer YOUR_JWT_TOKEN

   **–ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:**

   .. code-block:: json

      {
        "id": 1,
        "username": "johndoe",
        "email": "john@example.com",
        "avatar_url": "https://cloudinary.com/avatar.jpg",
        "role": "user",
        "is_verified": true,
        "created_at": "2025-09-23T10:30:00Z"
      }

   :statuscode 200: –£—Å–ø—ñ—à–Ω–æ
   :statuscode 401: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
   :statuscode 400: Email –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π

   .. note::
      –¶–µ–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –º–∞—î rate limiting: –º–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É.

–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∞
--------------------

.. http:post:: /api/v1/users/me/avatar

   **–¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤**

   –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∞–≤–∞—Ç–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Cloudinary.

   :form file: –§–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–º–∞–∫—Å–∏–º—É–º 5MB)

   :statuscode 200: –ê–≤–∞—Ç–∞—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
   :statuscode 400: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–∞–π–ª –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π
   :statuscode 403: –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

–ó–º—ñ–Ω–∞ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
----------------------

.. http:patch:: /api/v1/users/{user_id}/role

   **–¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤**

   **–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É:**

   .. code-block:: json

      {
        "role": "admin"
      }

   :param user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   :reqjson string role: –ù–æ–≤–∞ —Ä–æ–ª—å (user/admin)

   :statuscode 200: –†–æ–ª—å –∑–º—ñ–Ω–µ–Ω–∞
   :statuscode 400: –ê–¥–º—ñ–Ω –Ω–µ –º–æ–∂–µ –ø–æ–Ω–∏–∑–∏—Ç–∏ —Å–µ–±–µ
   :statuscode 403: –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   :statuscode 404: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π
'''
    
    with open("docs/api/users.rst", "w", encoding="utf-8") as f:
        f.write(users_content)
    
    # Contacts API
    contacts_content = '''–ö–æ–Ω—Ç–∞–∫—Ç–∏ API
============

–ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.

–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
------------------

.. http:post:: /api/v1/contacts/

   **–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É:**

   .. code-block:: json

      {
        "first_name": "–Ü–≤–∞–Ω",
        "last_name": "–ü–µ—Ç—Ä–µ–Ω–∫–æ",
        "email": "ivan@example.com", 
        "phone_number": "+380501234567",
        "birth_date": "1990-05-15",
        "additional_data": "–î—Ä—É–≥ –∑ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É"
      }

   **–ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:**

   .. code-block:: json

      {
        "id": 1,
        "first_name": "–Ü–≤–∞–Ω",
        "last_name": "–ü–µ—Ç—Ä–µ–Ω–∫–æ", 
        "email": "ivan@example.com",
        "phone_number": "+380501234567",
        "birth_date": "1990-05-15",
        "additional_data": "–î—Ä—É–≥ –∑ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É",
        "owner_id": 1
      }

   :reqjson string first_name: –Ü–º'—è (–æ–±–æ–≤'—è–∑–∫–æ–≤–µ)
   :reqjson string last_name: –ü—Ä—ñ–∑–≤–∏—â–µ (–æ–±–æ–≤'—è–∑–∫–æ–≤–µ)
   :reqjson string email: Email –∞–¥—Ä–µ—Å–∞ (—É–Ω—ñ–∫–∞–ª—å–Ω–∞)
   :reqjson string phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
   :reqjson string birth_date: –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (YYYY-MM-DD)
   :reqjson string additional_data: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)

   :statuscode 201: –ö–æ–Ω—Ç–∞–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ
   :statuscode 400: Email –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ
   :statuscode 401: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π

–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
--------------------------

.. http:get:: /api/v1/contacts/

   :query skip: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 0)
   :query limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 100)
   :query search: –ü–æ—à—É–∫ –∑–∞ —ñ–º–µ–Ω–µ–º, –ø—Ä—ñ–∑–≤–∏—â–µ–º –∞–±–æ email

   **–ü—Ä–∏–∫–ª–∞–¥ –∑ –ø–æ—à—É–∫–æ–º:**

   .. code-block:: text

      GET /api/v1/contacts/?search=–Ü–≤–∞–Ω&skip=0&limit=10

–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É –∑–∞ ID
------------------------

.. http:get:: /api/v1/contacts/{contact_id}

   :param contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç—É

   :statuscode 200: –ö–æ–Ω—Ç–∞–∫—Ç –∑–Ω–∞–π–¥–µ–Ω–æ
   :statuscode 404: –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ

–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
------------------

.. http:put:: /api/v1/contacts/{contact_id}

   **–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É:**

   .. code-block:: json

      {
        "first_name": "–Ü–≤–∞–Ω",
        "additional_data": "–û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ"
      }

   :param contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç—É

–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
------------------

.. http:delete:: /api/v1/contacts/{contact_id}

   :param contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç—É

   **–ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:**

   .. code-block:: json

      {
        "message": "Contact deleted successfully!"
      }

–î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
--------------

.. http:get:: /api/v1/contacts/birthdays/

   –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∑ –¥–Ω—è–º–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ 7 –¥–Ω—ñ–≤.

   **–ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:**

   .. code-block:: json

      [
        {
          "id": 1,
          "first_name": "–ú–∞—Ä—ñ—è",
          "last_name": "–ö–æ–≤–∞–ª–µ–Ω–∫–æ",
          "birth_date": "1985-12-25",
          "email": "maria@example.com"
        }
      ]
'''
    
    with open("docs/api/contacts.rst", "w", encoding="utf-8") as f:
        f.write(contacts_content)
    
    print("‚úÖ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞")


def create_modules_documentation():
    """–°—Ç–≤–æ—Ä—é—î –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –º–æ–¥—É–ª—ñ–≤."""
    print("üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –º–æ–¥—É–ª—ñ–≤...")
    
    # Modules index
    modules_index_content = '''–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –º–æ–¥—É–ª—ñ–≤
====================

–¶–µ–π —Ä–æ–∑–¥—ñ–ª –º—ñ—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –≤—Å—ñ—Ö –º–æ–¥—É–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É.

.. toctree::
   :maxdepth: 2
   
   models
   crud
   services
   utils

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É
-----------------

.. code-block:: text

   app/
   ‚îú‚îÄ‚îÄ main.py                 # –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–æ–¥–∞—Ç–∫—É
   ‚îú‚îÄ‚îÄ config.py              # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
   ‚îú‚îÄ‚îÄ api/                    # API —Ä–æ—É—Ç–µ—Ä–∏
   ‚îÇ   ‚îú‚îÄ‚îÄ deps.py            # –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
   ‚îÇ   ‚îî‚îÄ‚îÄ v1/                # API –≤–µ—Ä—Å—ñ—ó 1
   ‚îÇ       ‚îú‚îÄ‚îÄ api.py         # –ì–æ–ª–æ–≤–Ω–∏–π —Ä–æ—É—Ç–µ—Ä
   ‚îÇ       ‚îî‚îÄ‚îÄ endpoints/     # –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏
   ‚îú‚îÄ‚îÄ models/                # SQLAlchemy –º–æ–¥–µ–ª—ñ
   ‚îÇ   ‚îú‚îÄ‚îÄ users.py           # –ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
   ‚îÇ   ‚îî‚îÄ‚îÄ contacts.py        # –ú–æ–¥–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
   ‚îú‚îÄ‚îÄ schemas/               # Pydantic —Å—Ö–µ–º–∏
   ‚îÇ   ‚îú‚îÄ‚îÄ users.py           # –°—Ö–µ–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
   ‚îÇ   ‚îî‚îÄ‚îÄ contacts.py        # –°—Ö–µ–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
   ‚îú‚îÄ‚îÄ crud/                  # CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó
   ‚îÇ   ‚îú‚îÄ‚îÄ users.py           # CRUD –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
   ‚îÇ   ‚îî‚îÄ‚îÄ contacts.py        # CRUD –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
   ‚îú‚îÄ‚îÄ services/              # –ë—ñ–∑–Ω–µ—Å –ª–æ–≥—ñ–∫–∞
   ‚îÇ   ‚îú‚îÄ‚îÄ email.py           # Email —Å–µ—Ä–≤—ñ—Å
   ‚îÇ   ‚îú‚îÄ‚îÄ redis.py           # Redis –∫–µ—à—É–≤–∞–Ω–Ω—è
   ‚îÇ   ‚îî‚îÄ‚îÄ cloudinary.py      # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
   ‚îú‚îÄ‚îÄ middleware/            # Middleware
   ‚îÇ   ‚îú‚îÄ‚îÄ auth.py            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
   ‚îÇ   ‚îî‚îÄ‚îÄ rate_limiter.py    # Rate limiting
   ‚îú‚îÄ‚îÄ utils/                 # –£—Ç–∏–ª—ñ—Ç–∏
   ‚îÇ   ‚îî‚îÄ‚îÄ auth.py            # JWT —É—Ç–∏–ª—ñ—Ç–∏
   ‚îî‚îÄ‚îÄ database/              # –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
       ‚îú‚îÄ‚îÄ base.py            # –ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å
       ‚îî‚îÄ‚îÄ connection.py      # –ó'—î–¥–Ω–∞–Ω–Ω—è
'''
    
    with open("docs/modules/index.rst", "w", encoding="utf-8") as f:
        f.write(modules_index_content)
    
    # Models documentation
    models_content = '''–ú–æ–¥–µ–ª—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
==================

SQLAlchemy –º–æ–¥–µ–ª—ñ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.

.. automodule:: app.models.users
   :members:
   :undoc-members:
   :show-inheritance:

.. automodule:: app.models.contacts
   :members:
   :undoc-members:
   :show-inheritance:

–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—è (Enums)
--------------------

.. autoclass:: app.models.users.UserRole
   :members:
   :undoc-members:

–û—Å–Ω–æ–≤–Ω—ñ –º–æ–¥–µ–ª—ñ
--------------

–ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
~~~~~~~~~~~~~~~~~~

.. autoclass:: app.models.users.User
   :members:
   :undoc-members:
   :show-inheritance:

–ú–æ–¥–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç—É
~~~~~~~~~~~~~~~

.. autoclass:: app.models.contacts.Contact
   :members:
   :undoc-members:
   :show-inheritance:
'''
    
    with open("docs/modules/models.rst", "w", encoding="utf-8") as f:
        f.write(models_content)
    
    # CRUD documentation
    crud_content = '''CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó
==============

–ú–æ–¥—É–ª—ñ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π Create, Read, Update, Delete –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ CRUD
----------------

.. automodule:: app.crud.users
   :members:
   :undoc-members:
   :show-inheritance:

–ö–æ–Ω—Ç–∞–∫—Ç–∏ CRUD
-------------

.. automodule:: app.crud.contacts
   :members:
   :undoc-members:
   :show-inheritance:

–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
---------------

–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
~~~~~~~~~~~~~~~~~~~~~~~~~

.. autofunction:: app.crud.users.get_user_by_email
.. autofunction:: app.crud.users.create_user
.. autofunction:: app.crud.users.authenticate_user
.. autofunction:: app.crud.users.verify_user_email

–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
~~~~~~~~~~~~~~~~~~~~~

.. autofunction:: app.crud.contacts.get_contacts
.. autofunction:: app.crud.contacts.create_contact
.. autofunction:: app.crud.contacts.update_contact
.. autofunction:: app.crud.contacts.delete_contact
.. autofunction:: app.crud.contacts.get_contacts_with_upcoming_birthdays
'''
    
    with open("docs/modules/crud.rst", "w", encoding="utf-8") as f:
        f.write(crud_content)
    
    # Services documentation
    services_content = '''–°–µ—Ä–≤—ñ—Å–∏
========

–ú–æ–¥—É–ª—ñ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ–º–∏ —Å–µ—Ä–≤—ñ—Å–∞–º–∏ —Ç–∞ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–æ—é.

Email —Å–µ—Ä–≤—ñ—Å
------------

.. automodule:: app.services.email
   :members:
   :undoc-members:
   :show-inheritance:

Redis –∫–µ—à—É–≤–∞–Ω–Ω—è
----------------

.. automodule:: app.services.redis
   :members:
   :undoc-members:
   :show-inheritance:

Cloudinary —Å–µ—Ä–≤—ñ—Å
-----------------

.. automodule:: app.services.cloudinary
   :members:
   :undoc-members:
   :show-inheritance:

Cache —É—Ç–∏–ª—ñ—Ç–∏
-------------

.. automodule:: app.services.cache_utils
   :members:
   :undoc-members:

–û—Å–Ω–æ–≤–Ω—ñ –∫–ª–∞—Å–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó
------------------------

RedisService
~~~~~~~~~~~~

.. autoclass:: app.services.redis.RedisService
   :members:
   :undoc-members:

–§—É–Ω–∫—Ü—ñ—ó Cloudinary
~~~~~~~~~~~~~~~~~~

.. autofunction:: app.services.cloudinary.upload_avatar
.. autofunction:: app.services.cloudinary.delete_avatar

Email —Ñ—É–Ω–∫—Ü—ñ—ó
~~~~~~~~~~~~~

.. autofunction:: app.services.email.send_verification_email
.. autofunction:: app.services.email.send_password_reset_email
'''
    
    with open("docs/modules/services.rst", "w", encoding="utf-8") as f:
        f.write(services_content)
    
    # Utils documentation
    utils_content = '''–£—Ç–∏–ª—ñ—Ç–∏
========

–î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–æ–¥—É–ª—ñ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó.

–ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —É—Ç–∏–ª—ñ—Ç–∏
----------------------

.. automodule:: app.utils.auth
   :members:
   :undoc-members:
   :show-inheritance:

–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
---------------

–†–æ–±–æ—Ç–∞ –∑ –ø–∞—Ä–æ–ª—è–º–∏
~~~~~~~~~~~~~~~~~

.. autofunction:: app.utils.auth.get_password_hash
.. autofunction:: app.utils.auth.verify_password

JWT —Ç–æ–∫–µ–Ω–∏
~~~~~~~~~~

.. autofunction:: app.utils.auth.create_access_token
.. autofunction:: app.utils.auth.verify_token

–¢–æ–∫–µ–Ω–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
~~~~~~~~~~~~~~~~~~

.. autofunction:: app.utils.auth.generate_verification_token
.. autofunction:: app.utils.auth.generate_reset_password_token
.. autofunction:: app.utils.auth.create_reset_password_token
.. autofunction:: app.utils.auth.verify_reset_password_token
'''
    
    with open("docs/modules/utils.rst", "w", encoding="utf-8") as f:
        f.write(utils_content)
    
    print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –º–æ–¥—É–ª—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∞")


def create_development_documentation():
    """–°—Ç–≤–æ—Ä—é—î –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –¥–ª—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤."""
    print("üõ†Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤...")
    
    # Development index
    dev_index_content = '''–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤
===============================

–¶–µ–π —Ä–æ–∑–¥—ñ–ª –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø—Ä–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –¥–µ–ø–ª–æ–π –ø—Ä–æ–µ–∫—Ç—É.

.. toctree::
   :maxdepth: 2
   
   setup
   testing
   deployment

–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
-------------------

–¶–µ–π –ø—Ä–æ–µ–∫—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å—É—á–∞—Å–Ω–∏–π Python —Å—Ç–µ–∫:

* **FastAPI** - –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫
* **SQLAlchemy** - ORM
* **Alembic** - –º—ñ–≥—Ä–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
* **Pytest** - —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
* **Docker** - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü—ñ—è
* **Redis** - –∫–µ—à—É–≤–∞–Ω–Ω—è
* **PostgreSQL** - –±–∞–∑–∞ –¥–∞–Ω–∏—Ö

–í–∏–º–æ–≥–∏ –¥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ä–æ–∑—Ä–æ–±–∫–∏
-----------------------------

* Python 3.9+
* Docker —Ç–∞ Docker Compose
* Git
* –¢–µ–∫—Å—Ç–æ–≤–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∞–±–æ IDE (—Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è VS Code –∞–±–æ PyCharm)

–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–æ–∑—Ä–æ–±–∫–∏
-------------------------------

1. –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
2. –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
3. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
4. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ Docker
5. –í–∏–∫–æ–Ω–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó
6. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏
7. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä —Ä–æ–∑—Ä–æ–±–∫–∏
'''
    
    with open("docs/development/index.rst", "w", encoding="utf-8") as f:
        f.write(dev_index_content)
    
    # Setup documentation
    setup_content = '''–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ä–æ–∑—Ä–æ–±–∫–∏
===================================

–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—é –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏.

–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤–∏–º–æ–≥–∏
----------------

–ü–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º —Ä–æ–±–æ—Ç–∏ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —É –≤–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ:

* Python 3.9 –∞–±–æ –≤–∏—â–µ
* Git
* Docker —Ç–∞ Docker Compose
* pip —Ç–∞ venv

–ö—Ä–æ–∫ 1: –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
-------------------------------

.. code-block:: bash

   git clone <your-repo-url>
   cd contact-management-api

–ö—Ä–æ–∫ 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
------------------------------------------

.. code-block:: bash

   # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   python -m venv venv

   # –ê–∫—Ç–∏–≤–∞—Ü—ñ—è (Windows)
   venv\\Scripts\\activate

   # –ê–∫—Ç–∏–≤–∞—Ü—ñ—è (Linux/Mac)  
   source venv/bin/activate

–ö—Ä–æ–∫ 3: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
---------------------------------

.. code-block:: bash

   # –û—Å–Ω–æ–≤–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
   pip install -r requirements.txt

   # –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
   pip install -r requirements-test.txt

–ö—Ä–æ–∫ 4: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
----------------------------------------

.. code-block:: bash

   # –°–∫–æ–ø—ñ—é–π—Ç–µ –ø—Ä–∏–∫–ª–∞–¥ —Ñ–∞–π–ª—É
   cp .env.example .env

   # –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ —Ñ–∞–π–ª .env
   nano .env

–ü—Ä–∏–∫–ª–∞–¥ .env —Ñ–∞–π–ª—É:

.. code-block:: text

   # Database
   DB_HOST=localhost
   DB_PORT=5433
   DB_NAME=contacts_db
   DB_USER=contacts_user
   DB_PASSWORD=contacts_password

   # Security
   SECRET_KEY=your-super-secret-jwt-key-here
   ALGORITHM=HS256
   ACCESS_TOKEN_EXPIRE_MINUTES=30

   # Email Configuration
   MAIL_USERNAME=your-email@gmail.com
   MAIL_PASSWORD=your-app-password
   MAIL_FROM=your-email@gmail.com
   MAIL_PORT=587
   MAIL_SERVER=smtp.gmail.com

   # Cloudinary
   CLOUDINARY_NAME=your-cloudinary-name
   CLOUDINARY_API_KEY=your-api-key
   CLOUDINARY_API_SECRET=your-api-secret

   # Redis
   REDIS_HOST=localhost
   REDIS_PORT=6379

–ö—Ä–æ–∫ 5: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤
------------------------

.. code-block:: bash

   # –ó–∞–ø—É—Å–∫ PostgreSQL, Redis —Ç–∞ PgAdmin
   docker-compose up -d

   # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
   docker-compose ps

–ö—Ä–æ–∫ 6: –í–∏–∫–æ–Ω–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ–π
---------------------------

.. code-block:: bash

   # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ–π
   alembic upgrade head

   # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –º—ñ–≥—Ä–∞—Ü—ñ—ó (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏)
   alembic revision --autogenerate -m "–û–ø–∏—Å –∑–º—ñ–Ω"

–ö—Ä–æ–∫ 7: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–æ–∑—Ä–æ–±–∫–∏
--------------------------------

.. code-block:: bash

   # –ó–∞–ø—É—Å–∫ –∑ auto-reload
   uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

–ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
---------------

.. code-block:: bash

   # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API
   curl http://localhost:8000/health

   # –î–æ—Å—Ç—É–ø –¥–æ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
   open http://localhost:8000/docs

   # –î–æ—Å—Ç—É–ø –¥–æ PgAdmin
   open http://localhost:8080

   # –ü–µ—Ä–µ–≥–ª—è–¥ –ª–æ–≥—ñ–≤ Docker
   docker-compose logs -f

–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è IDE
----------------

VS Code
~~~~~~~

–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è:

* Python
* Pylance  
* Python Docstring Generator
* REST Client
* Docker

–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è .vscode/settings.json:

.. code-block:: json

   {
       "python.defaultInterpreterPath": "./venv/bin/python",
       "python.linting.enabled": true,
       "python.linting.pylintEnabled": true,
       "python.formatting.provider": "black",
       "python.testing.pytestEnabled": true,
       "python.testing.pytestArgs": ["tests/"]
   }

PyCharm
~~~~~~~

1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ Python —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –Ω–∞ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
2. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å pytest —è–∫ test runner
3. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑ black
'''
    
    with open("docs/development/setup.rst", "w", encoding="utf-8") as f:
        f.write(setup_content)
    
    # Testing documentation (—Å–∫–æ—Ä–æ—á–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ TESTING.md)
    testing_content = '''–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
==========

–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –∑–∞–ø—É—Å–∫—É —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—Ü—ñ —Ç–µ—Å—Ç—ñ–≤.

–®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç
-------------

.. code-block:: bash

   # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
   make install-test-deps

   # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Ç–µ—Å—Ç–∏
   make test

   # –¢—ñ–ª—å–∫–∏ –º–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏
   make test-unit

   # –¢—ñ–ª—å–∫–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏
   make test-integration

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç—ñ–≤
----------------

.. code-block:: text

   tests/
   ‚îú‚îÄ‚îÄ conftest.py              # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ç–∞ —Ñ—ñ–∫—Å—Ç—É—Ä–∏
   ‚îú‚îÄ‚îÄ unit/                    # –ú–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏
   ‚îÇ   ‚îú‚îÄ‚îÄ test_crud_users.py
   ‚îÇ   ‚îú‚îÄ‚îÄ test_crud_contacts.py
   ‚îÇ   ‚îî‚îÄ‚îÄ test_utils_auth.py
   ‚îî‚îÄ‚îÄ integration/             # –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏
       ‚îú‚îÄ‚îÄ test_api_auth.py
       ‚îú‚îÄ‚îÄ test_api_users.py
       ‚îî‚îÄ‚îÄ test_api_contacts.py

–ü–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ—Å—Ç–∞–º–∏
----------------

–ü—Ä–æ–µ–∫—Ç –º–∞—î –ø–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ—Å—Ç–∞–º–∏ –ø–æ–Ω–∞–¥ 75%:

.. code-block:: bash

   # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML –∑–≤—ñ—Ç—É –ø–æ–∫—Ä–∏—Ç—Ç—è
   make test-html

   # –ü–µ—Ä–µ–≥–ª—è–¥ –∑–≤—ñ—Ç—É
   open htmlcov/index.html

–ù–∞–ø–∏—Å–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤
----------------

–ü—Ä–∏–∫–ª–∞–¥ –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É:

.. code-block:: python

   @pytest.mark.unit
   def test_create_user(db_session):
       user_data = UserCreate(
           username="testuser",
           email="test@example.com", 
           password="password123"
       )
       
       user = create_user(db_session, user_data)
       
       assert user.username == "testuser"
       assert user.email == "test@example.com"

–ü—Ä–∏–∫–ª–∞–¥ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ç–µ—Å—Ç—É:

.. code-block:: python

   @pytest.mark.integration
   def test_create_contact_api(client, auth_headers):
       contact_data = {
           "first_name": "–Ü–≤–∞–Ω",
           "last_name": "–ü–µ—Ç—Ä–µ–Ω–∫–æ",
           "email": "ivan@example.com"
       }
       
       response = client.post(
           "/api/v1/contacts/",
           json=contact_data,
           headers=auth_headers
       )
       
       assert response.status_code == 201
'''
    
    with open("docs/development/testing.rst", "w", encoding="utf-8") as f:
        f.write(testing_content)
    
    # Deployment documentation
    deployment_content = '''–î–µ–ø–ª–æ–π
======

–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –¥–µ–ø–ª–æ—é Contact Management API –≤ –ø—Ä–æ–¥–∞–∫—à–Ω.

Docker –¥–µ–ø–ª–æ–π
-------------

–ü—Ä–æ–µ–∫—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –¥–µ–ø–ª–æ—é —á–µ—Ä–µ–∑ Docker:

.. code-block:: bash

   # –ü–æ–±—É–¥–æ–≤–∞ Docker –æ–±—Ä–∞–∑—É
   docker build -t contact-management-api .

   # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–º–ø–æ–∑–∏—Ü—ñ—ó
   docker-compose -f docker-compose.prod.yaml up -d

–ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
-------------------------------

.. code-block:: text

   DEBUG=false
   SECRET_KEY=super-secure-production-key-256-bit
   ACCESS_TOKEN_EXPIRE_MINUTES=15
   DB_PASSWORD=secure-production-password

Nginx –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
------------------

.. code-block:: nginx

   server {
       listen 80;
       server_name your-domain.com;
       
       location / {
           proxy_pass http://localhost:8000;
           proxy_set_header Host $host;
           proxy_set_header X-Real-IP $remote_addr;
       }
   }

–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
----------

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è health checks:

.. code-block:: bash

   curl http://your-domain.com/health

SSL/TLS
-------

–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Let's Encrypt –¥–ª—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤.
'''
    
    with open("docs/development/deployment.rst", "w", encoding="utf-8") as f:
        f.write(deployment_content)
    
    print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∞")


def create_makefile():
    """–°—Ç–≤–æ—Ä—é—î Makefile –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."""
    print("üî® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Makefile...")
    
    makefile_content = '''# Makefile for Sphinx documentation

SPHINXOPTS    ?=
SPHINXBUILD  ?= sphinx-build
SOURCEDIR    = .
BUILDDIR     = _build

# Put it first so that "make" without argument is like "make help".
help:
	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

.PHONY: help Makefile clean html livehtml

# Catch-all target: route all unknown targets to Sphinx using the new
# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
%: Makefile
	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

# Clean build directory
clean:
	rm -rf $(BUILDDIR)/*

# Build HTML documentation
html:
	@$(SPHINXBUILD) -b html "$(SOURCEDIR)" "$(BUILDDIR)/html" $(SPHINXOPTS)
	@echo
	@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."

# Live reload for development
livehtml:
	sphinx-autobuild "$(SOURCEDIR)" "$(BUILDDIR)/html" \
		--host 0.0.0.0 \
		--port 8080 \
		--open-browser \
		$(SPHINXOPTS)

# Clean build and rebuild
cleanhtml: clean html

# Build and open in browser  
open: html
	@python -c "import webbrowser; webbrowser.open('$(BUILDDIR)/html/index.html')"

# Check for broken links
linkcheck:
	@$(SPHINXBUILD) -b linkcheck "$(SOURCEDIR)" "$(BUILDDIR)/linkcheck" $(SPHINXOPTS)
	@echo
	@echo "Link check complete; look for any errors in the above output " \\
	      "or in $(BUILDDIR)/linkcheck/output.txt."

# Build PDF (requires LaTeX)
pdf:
	@$(SPHINXBUILD) -b latex "$(SOURCEDIR)" "$(BUILDDIR)/latex" $(SPHINXOPTS)
	@make -C $(BUILDDIR)/latex all-pdf
	@echo
	@echo "Build finished; the PDF files are in $(BUILDDIR)/latex."

# Check documentation health
doctest:
	@$(SPHINXBUILD) -b doctest "$(SOURCEDIR)" "$(BUILDDIR)/doctest" $(SPHINXOPTS)
	@echo "Testing of doctests in the sources finished, look at the " \\
	      "results in $(BUILDDIR)/doctest/output.txt."

# Coverage check
coverage:
	@$(SPHINXBUILD) -b coverage "$(SOURCEDIR)" "$(BUILDDIR)/coverage" $(SPHINXOPTS)
	@echo "Testing of coverage in the sources finished, look at the " \\
	      "results in $(BUILDDIR)/coverage/python.txt."
'''
    
    with open("docs/Makefile", "w", encoding="utf-8") as f:
        f.write(makefile_content)
    
    print("‚úÖ Makefile —Å—Ç–≤–æ—Ä–µ–Ω–æ")


def create_requirements_file():
    """–°—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª requirements –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."""
    print("üìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è requirements.txt –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...")
    
    requirements_content = '''sphinx>=7.1.0
sphinx-rtd-theme>=1.3.0
sphinx-autodoc-typehints>=1.24.0
sphinx-autoapi>=3.0.0
myst-parser>=2.0.0
sphinx-autobuild>=2021.3.14
sphinx-copybutton>=0.5.2
sphinxext-opengraph>=0.9.0
typing-extensions>=4.8.0
'''
    
    with open("docs/requirements.txt", "w", encoding="utf-8") as f:
        f.write(requirements_content)
    
    print("‚úÖ requirements.txt —Å—Ç–≤–æ—Ä–µ–Ω–æ")


def add_missing_docstrings():
    """–î–æ–¥–∞—î –≤—ñ–¥—Å—É—Ç–Ω—ñ docstring –¥–æ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤."""
    print("üìù –î–æ–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö docstring...")
    
    # –¶–µ —Ñ—É–Ω–∫—Ü—ñ—è-–∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–ª–æ –± –º–æ–¥–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏
    # –ê–ª–µ —Ü–µ —Å–∫–ª–∞–¥–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –≤ –º–µ–∂–∞—Ö —Ü—å–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    print("‚ö†Ô∏è –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—Ä—É—á–Ω—É –¥–æ–¥–∞—Ç–∏ docstring –¥–æ —Ñ–∞–π–ª—ñ–≤:")
    print("   - app/main.py (—Ñ—É–Ω–∫—Ü—ñ—ó root, health_check, —Ç–æ—â–æ)")
    print("   - app/api/v1/endpoints/*.py (—Ñ—É–Ω–∫—Ü—ñ—ó API endpoints)")
    print("   - app/config.py (–∫–ª–∞—Å Settings)")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ docstring
    example_docstring = '''
    –ü—Ä–∏–∫–ª–∞–¥ docstring –¥–ª—è API endpoint:
    
    def create_contact(contact: ContactCreate, current_user: User = Depends(get_current_verified_user)):
        """
        –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        
        Args:
            contact (ContactCreate): –î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
            current_user (User): –ü–æ—Ç–æ—á–Ω–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            
        Returns:
            ContactResponse: –°—Ç–≤–æ—Ä–µ–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –∑ ID —Ç–∞ owner_id
            
        Raises:
            HTTPException: 400 —è–∫—â–æ email –≤–∂–µ —ñ—Å–Ω—É—î
            HTTPException: 422 —è–∫—â–æ –¥–∞–Ω—ñ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ
            
        Example:
            >>> contact_data = ContactCreate(
            ...     first_name="–Ü–≤–∞–Ω",
            ...     last_name="–ü–µ—Ç—Ä–µ–Ω–∫–æ",
            ...     email="ivan@example.com"
            ... )
            >>> contact = create_contact(contact_data, current_user)
            >>> contact.id
            1
        """
    '''
    
    print(example_docstring)
    print("‚úÖ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è docstring —Å—Ç–≤–æ—Ä–µ–Ω—ñ")