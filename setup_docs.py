#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Sphinx –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
–¥–ª—è Contact Management API –ø—Ä–æ–µ–∫—Ç—É.

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    python setup_docs.py [--clean] [--build] [--serve]

–û–ø—Ü—ñ—ó:
    --clean     –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é
    --build     –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    --serve     –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
"""

import os
import sys
import shutil
import subprocess
import argparse
from pathlib import Path

# Set UTF-8 encoding for Windows
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())


def run_command(command, description="", check=True):
    """–ó–∞–ø—É—Å–∫–∞—î –∫–æ–º–∞–Ω–¥—É —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    print(f"üîÑ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
    
    try:
        result = subprocess.run(command, check=check, capture_output=True, text=True)
        if result.stdout:
            print(result.stdout)
        print(f"‚úÖ {description} - –£—Å–ø—ñ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –ü–æ–º–∏–ª–∫–∞: {e}")
        if e.stderr:
            print(f"Stderr: {e.stderr}")
        return False


def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π."""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    
    required_packages = [
        "sphinx",
        "sphinx-rtd-theme",
        "myst-parser"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace("-", "_"))
            print(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package}")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏: {', '.join(missing_packages)}")
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –∫–æ–º–∞–Ω–¥–æ—é:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    print("‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")
    return True


def create_docs_structure():
    """–°—Ç–≤–æ—Ä—é—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."""
    print("üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π...")
    
    dirs_to_create = [
        "docs",
        "docs/_static",
        "docs/_templates", 
        "docs/modules",
        "docs/api",
        "docs/development",
        "docs/images"
    ]
    
    for dir_path in dirs_to_create:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {dir_path}")
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —Å—Ç–≤–æ—Ä–µ–Ω–∞")


def install_docs_dependencies():
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."""
    print("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...")
    
    docs_requirements = [
        "sphinx>=7.1.0",
        "sphinx-rtd-theme>=1.3.0", 
        "myst-parser>=2.0.0",
        "sphinx-autobuild>=2021.3.14",
        "sphinx-autodoc-typehints>=1.24.0"
    ]
    
    for package in docs_requirements:
        success = run_command(
            ["pip", "install", package],
            f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {package.split('>=')[0]}",
            check=False
        )
        if not success:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ {package}")
    
    print("‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")


def create_sphinx_config():
    """–°—Ç–≤–æ—Ä—é—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª Sphinx."""
    print("‚öôÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Sphinx...")
    
    config_content = '''# Configuration file for the Sphinx documentation builder.
import os
import sys

# Add the project root to the path
sys.path.insert(0, os.path.abspath('..'))
sys.path.insert(0, os.path.abspath('../app'))

# Project information
project = 'Contact Management API'
copyright = '2025, Contact Management Team'
author = 'Contact Management Team'
release = '2.0.0'

# General configuration
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx_rtd_theme',
    'myst_parser',
]

templates_path = ['_templates']
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']
language = 'uk'

# HTML output options
html_theme = 'sphinx_rtd_theme'
html_static_path = ['_static']
html_css_files = ['custom.css']

# Theme options
html_theme_options = {
    'collapse_navigation': True,
    'sticky_navigation': True,
    'navigation_depth': 4,
    'style_nav_header_background': '#2980B9',
}

# Autodoc options
autodoc_default_options = {
    'members': True,
    'undoc-members': True,
    'show-inheritance': True,
}

autodoc_mock_imports = [
    'fastapi', 'sqlalchemy', 'pydantic', 'jose', 'passlib',
    'redis', 'cloudinary', 'fastapi_mail', 'alembic'
]

# Napoleon settings
napoleon_google_docstring = True
napoleon_numpy_docstring = True
napoleon_include_special_with_doc = True

# Intersphinx mapping
intersphinx_mapping = {
    'python': ('https://docs.python.org/3/', None),
    'fastapi': ('https://fastapi.tiangolo.com/', None),
}

def setup(app):
    app.add_css_file('custom.css')
'''
    
    with open("docs/conf.py", "w", encoding="utf-8") as f:
        f.write(config_content)
    
    print("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Sphinx —Å—Ç–≤–æ—Ä–µ–Ω–∞")


def create_index_page():
    """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."""
    print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏...")
    
    index_content = '''Contact Management API Documentation
=====================================

.. image:: https://img.shields.io/badge/version-2.0.0-blue.svg
   :alt: Version

.. image:: https://img.shields.io/badge/python-3.9+-green.svg
   :alt: Python Version

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó **Contact Management API** - —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∑ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é.

üåü –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ
--------------

* JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
* Email –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
* –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
* –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä—ñ–≤
* Rate limiting
* Redis –∫–µ—à—É–≤–∞–Ω–Ω—è

üìö –ó–º—ñ—Å—Ç
--------

.. toctree::
   :maxdepth: 2
   :caption: API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è

   api/authentication
   api/users
   api/contacts

.. toctree::
   :maxdepth: 2
   :caption: –ö–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è

   modules/models
   modules/crud
   modules/services

üöÄ –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç
----------------

1. –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É:

.. code-block:: bash

   git clone <repo-url>
   cd contact-management-api

2. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π:

.. code-block:: bash

   pip install -r requirements.txt

3. –ó–∞–ø—É—Å–∫ API:

.. code-block:: bash

   uvicorn app.main:app --reload

–Ü–Ω–¥–µ–∫—Å–∏
=======

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
'''
    
    with open("docs/index.rst", "w", encoding="utf-8") as f:
        f.write(index_content)
    
    print("‚úÖ –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞")


def create_makefile():
    """–°—Ç–≤–æ—Ä—é—î Makefile –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."""
    print("üî® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Makefile...")
    
    makefile_content = '''# Makefile for Sphinx documentation

SPHINXOPTS    ?=
SPHINXBUILD  ?= sphinx-build
SOURCEDIR    = .
BUILDDIR     = _build

help:
	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

.PHONY: help Makefile

%: Makefile
	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

# Live reload for development
livehtml:
	sphinx-autobuild "$(SOURCEDIR)" "$(BUILDDIR)/html" --host 0.0.0.0 --port 8080

# Clean build
clean-build: clean html

# Build and open in browser
html-open: html
	@python -c "import webbrowser; webbrowser.open('_build/html/index.html')"
'''
    
    with open("docs/Makefile", "w", encoding="utf-8") as f:
        f.write(makefile_content)
    
    print("‚úÖ Makefile —Å—Ç–≤–æ—Ä–µ–Ω–æ")


def create_requirements_file():
    """–°—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª requirements –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."""
    print("üìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è requirements.txt –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...")
    
    requirements_content = '''sphinx>=7.1.0
sphinx-rtd-theme>=1.3.0
sphinx-autodoc-typehints>=1.24.0
myst-parser>=2.0.0
sphinx-autoapi>=3.0.0
sphinx-autobuild>=2021.3.14
typing-extensions>=4.8.0
'''
    
    with open("docs/requirements.txt", "w", encoding="utf-8") as f:
        f.write(requirements_content)
    
    print("‚úÖ requirements.txt —Å—Ç–≤–æ—Ä–µ–Ω–æ")


def generate_module_docs():
    """–ì–µ–Ω–µ—Ä—É—î –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –¥–ª—è –º–æ–¥—É–ª—ñ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ."""
    print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –º–æ–¥—É–ª—ñ–≤...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ RST —Ñ–∞–π–ª–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
    modules_info = {
        "models": {
            "title": "–ú–æ–¥–µ–ª—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö",
            "description": "SQLAlchemy –º–æ–¥–µ–ª—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤"
        },
        "crud": {
            "title": "CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó",
            "description": "–§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"
        },
        "utils": {
            "title": "–£—Ç–∏–ª—ñ—Ç–∏",
            "description": "–î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ —É—Ç–∏–ª—ñ—Ç–∏"
        },
        "services": {
            "title": "–°–µ—Ä–≤—ñ—Å–∏",
            "description": "–ó–æ–≤–Ω—ñ—à–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ (Redis, Cloudinary, Email)"
        },
        "middleware": {
            "title": "Middleware",
            "description": "Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ rate limiting"
        }
    }
    
    for module_name, info in modules_info.items():
        rst_content = f'''{info["title"]}
{'=' * len(info["title"])}

{info["description"]}

.. automodule:: app.{module_name}
   :members:
   :undoc-members:
   :show-inheritance:
'''
        
        with open(f"docs/modules/{module_name}.rst", "w", encoding="utf-8") as f:
            f.write(rst_content)
        
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ docs/modules/{module_name}.rst")


def build_documentation():
    """–ë—É–¥—É—î –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é."""
    print("üèóÔ∏è –ü–æ–±—É–¥–æ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...")

    os.chdir("docs")

    # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ make (–¥–ª—è Unix —Å–∏—Å—Ç–µ–º)
    success = False
    try:
        success = run_command(
            ["make", "html"],
            "–ü–æ–±—É–¥–æ–≤–∞ HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó (make)",
            check=False
        )
    except FileNotFoundError:
        print("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ 'make' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sphinx-build...")

    # –Ø–∫—â–æ make –Ω–µ –ø—Ä–∞—Ü—é—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sphinx-build –Ω–∞–ø—Ä—è–º—É
    if not success:
        success = run_command(
            ["sphinx-build", "-b", "html", ".", "_build/html"],
            "–ü–æ–±—É–¥–æ–≤–∞ HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó (sphinx-build)"
        )

    os.chdir("..")

    if success:
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –ø–æ–±—É–¥–æ–≤–∞–Ω–∞!")
        print("üìÅ HTML —Ñ–∞–π–ª–∏ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤: docs/_build/html/")
        print("üåê –í—ñ–¥–∫—Ä–∏–π—Ç–µ docs/_build/html/index.html —É –±—Ä–∞—É–∑–µ—Ä—ñ")
    else:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–±—É–¥–æ–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó")

    return success


def serve_documentation():
    """–ó–∞–ø—É—Å–∫–∞—î —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...")
    
    os.chdir("docs")
    
    try:
        print("üì° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:8080")
        print("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏")
        
        subprocess.run([
            "sphinx-autobuild", 
            ".", 
            "_build/html",
            "--host", "0.0.0.0",
            "--port", "8080"
        ])
        
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ")
    finally:
        os.chdir("..")


def clean_docs():
    """–û—á–∏—â—É—î —ñ—Å–Ω—É—é—á—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é."""
    print("üßπ –û—á–∏—â–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...")
    
    paths_to_clean = [
        "docs/_build",
        "docs/modules",
    ]
    
    for path in paths_to_clean:
        if os.path.exists(path):
            shutil.rmtree(path)
            print(f"‚úÖ –û—á–∏—â–µ–Ω–æ: {path}")
        else:
            print(f"‚ö†Ô∏è –®–ª—è—Ö –Ω–µ —ñ—Å–Ω—É—î: {path}")
    
    print("‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    parser = argparse.ArgumentParser(
        description="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Sphinx –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –¥–ª—è Contact Management API"
    )
    parser.add_argument("--clean", action="store_true", 
                       help="–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é")
    parser.add_argument("--build", action="store_true",
                       help="–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    parser.add_argument("--serve", action="store_true",
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É")
    
    args = parser.parse_args()
    
    print("üìö Contact Management API - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó")
    print("=" * 60)
    
    try:
        # –û—á–∏—â–µ–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if args.clean:
            clean_docs()
        
        # –û—Å–Ω–æ–≤–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        if not check_dependencies():
            print("‚ùå –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É")
            sys.exit(1)
        
        create_docs_structure()
        install_docs_dependencies()
        create_sphinx_config()
        create_index_page()
        create_makefile()
        create_requirements_file()
        generate_module_docs()
        
        print("\nüéâ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –ü–æ–±—É–¥–æ–≤–∞ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if args.build:
            build_documentation()
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if args.serve:
            serve_documentation()
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        print("\nüìã –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
        print("1. cd docs")
        print("2. make html                 # –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é")
        print("3. make livehtml            # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ live reload —Å–µ—Ä–≤–µ—Ä")
        print("4. firefox _build/html/index.html  # –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ")
        
    except KeyboardInterrupt:
        print("\n‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()